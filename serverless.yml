service: user-recomendation-service

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage}
  region: ${opt:region}
  architecture: arm64
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:BatchGetItem"
        - "dynamodb:ConditionCheckItem"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:Query"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource:
        - "arn:aws:dynamodb:${opt:region}:*:table/${self:provider.environment.USER_RECORD_INTERACTION}"
        - "arn:aws:dynamodb:${opt:region}:*:table/${self:provider.environment.USER_SALES}"
  environment:
    POWERTOOLS_LOG_LEVEL: "DEBUG"
    POWERTOOLS_SERVICE_NAME: "user-recomendation-service"
    # POWERTOOLS_DEV: 1
    POWERTOOLS_LOGGER_LOG_EVENT: "true" #context
    # POWERTOOLS_TRACE_ENABLED: "false"

    USER_RECORD_INTERACTION: ${opt:stage}-user-record-interaction
    OPENAI_API_KEY: ${param:openai-api-key}
    USER_SALES: ${opt:stage}-user-sales
    BELCORP_MICROSERVICE: https://9oc6uu1fcl.execute-api.us-west-2.amazonaws.com/dev

package:
  individually: true
  excludeDevDependencies: true

custom:
  defaultRegion: "us-west-2"
  esbuild:
    bundle: true
    minify: true
  prune:
    automatic: true
    number: 3
  # lambdaInsights:
  #   defaultLambdaInsights: true
  #   lambdaInsightsVersion: 16
  #   attachPolicy: true
  responseGetters:
    headers:
      Content-Type: "'application/json'"
      Content-Security-Policy: "'Include default-src 'self''"
      X-Frame-Options: "'DENY'"
      X-Content-Type-Options: "'nosniff'"
      X-Permitted-Cross-Domain-Policies: "'none'"
      Strict-Transport-Security: "'max-age=31536000; includeSubDomains; preload'"
      X-XSS-Protection: "'1'"
      Cache-Control: "'max-age=0; Expires=-1 or Expires: Fri, 01 Jan 1990 00:00:00 GMT; no-cache, must-revalidate'"
    statusCodes:
      200:
        pattern: ""
      400:
        pattern: '.*"statusCode":400.*'
        template: "$input.path('$.errorMessage')"
      401:
        pattern: '.*"statusCode":401.*'
        template: "$input.path('$.errorMessage')"
      404:
        pattern: '.*"statusCode":404.*'
        template: "$input.path('$.errorMessage')"
      500:
        pattern: '.*"statusCode":500.*'
        template: "$input.path('$.errorMessage')"

plugins:
  - serverless-prune-plugin
  - serverless-esbuild
  - serverless-offline

functions:
  product-recomendation:
    handler: src/functions/product-recomendation.handler
    description: Get recomendations of products
    timeout: 30
    memorySize: 512
    events:
      - http:
          method: POST
          path: /user/product-recomendation
          integration: lambda
          cors: true
          response: ${self:custom.responseGetters}
  getClients:
    handler: src/functions/getClients.handler
    description: Get clients
    timeout: 30
    memorySize: 512
    events:
      - http:
          method: GET
          path: /clients
          integration: lambda
          cors: true
          response: ${self:custom.responseGetters}
  getClient:
    handler: src/functions/getClient.handler
    description: Get client by code
    timeout: 30
    memorySize: 512
    events:
      - http:
          method: GET
          path: /clients/{code}
          integration: lambda
          cors: true
          response: ${self:custom.responseGetters}

resources:
  Resources:
    userRecordInteractionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_RECORD_INTERACTION}
        AttributeDefinitions:
          - AttributeName: "PK"
            AttributeType: "S"
          - AttributeName: "SK"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "PK"
            KeyType: "HASH"
          - AttributeName: "SK"
            KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST
    userSalesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_SALES}
        AttributeDefinitions:
          - AttributeName: "PK"
            AttributeType: "S"
          - AttributeName: "SK"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "PK"
            KeyType: "HASH"
          - AttributeName: "SK"
            KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST
